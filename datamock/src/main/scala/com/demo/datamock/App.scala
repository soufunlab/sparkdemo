package com.demo.datamock

import java.io.{File, FileWriter}
import java.text.SimpleDateFormat
import java.util.{Calendar, Date, UUID}

import scala.util.Random

/**
  * Hello world!
  *
  */
object App {

  def getTime() = {
    val calendar = Calendar.getInstance()
    var simpleDateFormat = new SimpleDateFormat("yyyyMMdd HHmmss")
    val min = calendar.get(Calendar.MINUTE)
    if (min <= 30) {
      simpleDateFormat.format(calendar.getTime)
    } else {
      calendar.add(Calendar.HOUR, 1)
      simpleDateFormat.format(calendar.getTime)
    }
  }

  def main(args: Array[String]): Unit = {

    var s = getTime()

    val list: List[String] = List(
      "安徽省,合肥", "安徽省,安庆", "安徽省,蚌埠", "安徽省,巢湖", "安徽省,池州", "安徽省,阜阳", "安徽省,淮北", "安徽省,淮南", "安徽省,六安", "安徽省,马鞍山", "安徽省,亳州", "安徽省,宣城", "安徽省,铜陵", "安徽省,芜湖", "安徽省,滁州", "安徽省,黄山", "安徽省,宿州", "北京市,北京", "福建省,福州", "福建省,厦门", "福建省,龙岩", "福建省,泉州", "福建省,漳州", "福建省,莆田", "福建省,南平", "福建省,三明", "福建省,宁德", "甘肃省,兰州", "甘肃省,定西", "甘肃省,甘南", "甘肃省,平凉", "甘肃省,武威", "甘肃省,临夏回族自治州", "甘肃省,酒泉", "甘肃省,张掖", "甘肃省,庆阳", "甘肃省,陇南", "甘肃省,天水", "甘肃省,嘉峪关", "甘肃省,金昌", "甘肃省,白银", "广东省,广州", "广东省,深圳", "广东省,珠海", "广东省,东莞", "广东省,中山", "广东省,佛山", "广东省,汕头", "广东省,肇庆", "广东省,潮州", "广东省,韶关", "广东省,湛江", "广东省,茂名", "广东省,梅州", "河北省,唐山", "广东省,惠州", "广东省,江门", "广东省,揭阳", "广东省,清远", "广东省,云浮", "广东省,阳江", "广东省,河源", "广东省,汕尾", "广西壮族自治区,南宁", "广西壮族自治区,柳州", "广西壮族自治区,桂林", "广西壮族自治区,北海", "广西壮族自治区,百色", "广西壮族自治区,贺州", "广西壮族自治区,河池", "广西壮族自治区,贵港", "广西壮族自治区,玉林", "广西壮族自治区,钦州", "广西壮族自治区,梧州", "广西壮族自治区,防城港", "广西壮族自治区,来宾", "广西壮族自治区,崇左", "贵州省,贵阳", "贵州省,遵义", "贵州省,黔西南", "贵州省,安顺", "贵州省,毕节地区", "贵州省,黔南", "贵州省,六盘水", "贵州省,黔东南", "贵州省,铜仁地区", "海南省,海口", "海南省,省直辖县级行政区划", "海南省,三亚", "海南省,琼北", "海南省,琼南", "河北省,石家庄", "河北省,邢台", "河北省,沧州", "河北省,秦皇岛", "河北省,廊坊", "河北省,邯郸", "河北省,衡水", "河北省,保定", "河北省,张家口", "河北省,承德", "河南省,郑州", "河南省,洛阳", "河南省,周口", "河南省,信阳", "河南省,新乡", "河南省,商丘", "河南省,三门峡", "河南省,濮阳", "河南省,南阳", "河南省,漯河", "河南省,焦作", "河南省,开封", "河南省,安阳", "山东省,德州", "河南省,鹤壁", "河南省,平顶山", "河南省,驻马店", "河南省,许昌", "黑龙江省,哈尔滨", "黑龙江省,大庆", "黑龙江省,齐市", "黑龙江省,鹤岗", "黑龙江省,黑河", "黑龙江省,佳木斯", "黑龙江省,鸡西", "黑龙江省,牡丹江", "黑龙江省,七台河", "黑龙江省,伊春", "黑龙江省,双鸭山", "黑龙江省,绥化", "黑龙江省,兴安", "湖北省,武汉", "湖北省,十堰", "湖北省,襄阳", "湖北省,随州", "湖北省,仙桃", "湖北省,宜昌", "湖北省,黄石", "湖北省,荆门", "湖北省,荆州", "湖北省,恩施土家族苗族自治州", "湖北省,鄂州", "湖北省,咸宁", "湖北省,孝感", "湖北省,黄冈", "湖南省,长沙", "湖南省,郴州", "湖南省,常德", "湖南省,衡阳", "湖南省,怀化", "湖南省,娄底", "湖南省,株洲", "湖南省,岳阳", "湖南省,湘潭", "湖南省,邵阳", "湖南省,永州", "湖南省,益阳", "湖南省,张家界", "湖南省,湘西", "吉林省,长春", "吉林省,吉林", "吉林省,通化", "吉林省,延边", "吉林省,辽源", "吉林省,白山", "吉林省,松原", "辽宁省,鞍山", "吉林省,白城", "吉林省,四平", "江苏省,南京", "江苏省,苏州", "江苏省,无锡", "江苏省,常州", "江苏省,镇江", "江苏省,淮安", "江苏省,连云港", "江苏省,南通", "江苏省,盐城", "江苏省,扬州", "江苏省,泰州", "江苏省,徐州", "江苏省,宿迁", "江西省,南昌", "江西省,上饶", "江西省,萍乡", "江西省,新余", "江西省,宜春", "江西省,九江", "江西省,赣州", "江西省,吉安", "江西省,景德镇", "江西省,抚州", "江西省,鹰潭", "辽宁省,沈阳", "辽宁省,丹东", "辽宁省,抚顺", "辽宁省,阜新", "辽宁省,葫芦岛", "辽宁省,营口", "辽宁省,朝阳", "辽宁省,大连", "辽宁省,本溪", "辽宁省,锦州", "辽宁省,辽阳", "辽宁省,盘锦", "辽宁省,铁岭", "内蒙古自治区,呼市", "内蒙古自治区,包头", "内蒙古自治区,赤峰", "内蒙古自治区,通辽", "内蒙古自治区,乌海", "内蒙古自治区,鄂市", "内蒙古自治区,呼盟", "内蒙古自治区,巴盟", "内蒙古自治区,乌盟", "内蒙古自治区,兴安", "内蒙古自治区,锡盟", "内蒙古自治区,阿拉善", "宁夏回族自治区,银川", "宁夏回族自治区,吴忠", "宁夏回族自治区,固原", "宁夏回族自治区,石嘴山", "宁夏回族自治区,中卫", "青海省,西宁", "青海省,海西", "青海省,海北", "青海省,黄南", "青海省,果洛", "青海省,玉树", "青海省,海东", "青海省,海南", "山东省,济南", "山东省,青岛", "山东省,烟台", "山东省,威海", "山东省,潍坊", "山东省,泰安", "山东省,枣庄", "山东省,淄博", "山东省,东营", "山东省,菏泽", "山东省,滨州", "山东省,聊城", "山东省,临沂", "山东省,济宁", "山东省,日照", "山东省,烟威", "山东省,莱芜", "山西省,太原", "山西省,大同", "山西省,晋城", "山西省,晋中", "山西省,临汾", "山西省,长治", "山西省,运城", "山西省,吕梁", "山西省,忻州", "山西省,阳泉", "山西省,朔州", "陕西省,西安", "陕西省,咸阳", "陕西省,渭南", "陕西省,榆林", "陕西省,宝鸡", "陕西省,安康", "陕西省,汉中", "陕西省,延安", "陕西省,铜川", "陕西省,商洛", "上海市,上海", "四川省,成都", "四川省,绵阳", "四川省,遂宁", "四川省,攀枝花", "四川省,凉山", "四川省,宜宾", "四川省,雅安", "四川省,自贡", "四川省,资阳", "四川省,广元", "四川省,德阳", "四川省,乐山", "四川省,南充", "四川省,眉山", "四川省,巴中", "四川省,泸州", "四川省,内江", "四川省,广安", "四川省,达州", "四川省,阿坝", "四川省,甘孜", "天津市,天津", "西藏自治区,拉萨", "西藏自治区,日喀则", "西藏自治区,山南", "西藏自治区,那曲", "西藏自治区,阿里", "西藏自治区,山南地区", "西藏自治区,昌都", "西藏自治区,林芝", "新疆维吾尔自治区,乌市", "新疆维吾尔自治区,喀什地区", "新疆维吾尔自治区,克市", "新疆维吾尔自治区,巴州", "新疆维吾尔自治区,伊犁", "新疆维吾尔自治区,哈密地区", "新疆维吾尔自治区,吐鲁番地区", "新疆维吾尔自治区,博州", "新疆维吾尔自治区,塔城地区", "新疆维吾尔自治区,昌吉回族自治州", "新疆维吾尔自治区,阿勒泰地区", "新疆维吾尔自治区,克州", "新疆维吾尔自治区,阿克苏地区", "新疆维吾尔自治区,和田地区", "新疆维吾尔自治区,自治区直辖县级行政区划", "云南省,昆明", "云南省,玉溪", "云南省,曲靖", "云南省,大理白族自治州", "云南省,红河", "云南省,保山", "云南省,楚雄彝族自治州", "云南省,德宏", "云南省,临沧", "云南省,文山", "云南省,版纳", "云南省,普洱", "云南省,昭通", "云南省,丽江", "云南省,怒江", "云南省,迪庆", "浙江省,杭州", "浙江省,宁波", "浙江省,温州", "浙江省,台州", "浙江省,嘉兴", "浙江省,金华", "浙江省,丽水", "浙江省,湖州", "浙江省,衢州", "浙江省,绍兴", "浙江省,舟山", "重庆市,重庆", "重庆市,万州", "浙江省,余慈", "浙江省,乐清地区", "河南省,省直辖县级行政区划", "湖北省,省直辖县级行政区划"
    )
    val devices: List[String] = List("小米8,Android6", "小米mix,Android7", "iPhone8,ios11", "iPhone8plus,ios12")

    val rd = new Random();
    val dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss")

    for (i <- 1 to Int.MaxValue) {
      var count = 0
      val path = "/home/datamock/wechat/%s.COMPLETED".format(i)
      //      val path = "C:\\github\\sparkdemo\\datamock\\%s.COMPLETED".format(i)
      //      val out = new FileWriter(path, true)
      import java.io.FileOutputStream
      import java.io.OutputStreamWriter
      val out = new OutputStreamWriter(new FileOutputStream(path), "UTF-8")
      try {
        println("start mock i:" + i)
        while (count < 500) {
          //time openid traceid sourceurl pageurl staytime province city event(load,register,exit,view,error) device os
          val city = getcity
          val traceId = getTraceid
          val openId = getOpenid
          val deviceos = device
          val de = deviceos.split(",")(0)
          val os = deviceos.split(",")(1)

          var i = 1;
          while (i <= 10) {
            var event = "view"
            if (i == 1) event = "load"
            else if (i == 10) event = "exit"
            else if (i == 5) {
              if (count == 100 || count == 200) event = "register"
              if (count == 250) event = "error"
            }

            var time = nowdate()
            if (event == "exit") {
              val cal = Calendar.getInstance()
              cal.add(Calendar.MINUTE, rd.nextInt(20) + 1)
              time = dateFormat.format(cal.getTime)
            }

            val value = "%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s"
              .format(time, openId, traceId, pageurl, pageurl, staytime, city.split(",")(0), city.split(",")(1), event, de, os)
            out.write(value + System.getProperty("line.separator"))
            i += 1
          }

          count += 1
        }
      } finally {
        out.close()
        val file1 = new File(path)
        var file2 = new File(path.replace("COMPLETED", "txt"))
        file1.renameTo(file2)
      }
      Thread.sleep(60 * 1000);
    }

    def device() = {
      devices(rd.nextInt(4));
    }

    def nowdate() = {
      val date = new Date();
      dateFormat.format(date)
    }

    def getOpenid() = {
      rd.nextInt(1000) + 1;
    }

    def getTraceid() = {
      UUID.randomUUID().toString().replace("-", "")
    }

    def pageurl() = {
      "page" + rd.nextInt(100) + 1
    }

    def staytime() = {
      rd.nextInt(100) + 1
    }


    def getcity() = {
      list(rd.nextInt(list.length))
    }
  }
}
